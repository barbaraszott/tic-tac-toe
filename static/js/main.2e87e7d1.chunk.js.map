{"version":3,"sources":["Square.js","Board.js","lines.js","Turn.js","Result.js","Game.js","serviceWorker.js","index.js"],"names":["Square","handleClick","props","isFinished","value","onClick","id","icon","this","className","style","Component","Board","renderSquare","i","boxWinStyle","winner","winningLine","includes","backgroundColor","moves","onSquareClick","lines","Turn","player","Result","winnerColor","color","Game","chooseFirstPlayer","Math","round","random","nextPlayer","state","makeMove","checkedBox","currentPlayer","newState","forEach","line","every","box","Object","keys","length","setState","componentDidMount","resetGame","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yWA8BeA,G,sNAzBdC,YAAc,WACT,EAAKC,MAAMC,YAAc,EAAKD,MAAME,OAExC,EAAKF,MAAMG,QAAQ,EAAKH,MAAMI,K,wEAI9B,IAAMC,EAAQC,KAAKN,MAAME,MAAkC,MAArBI,KAAKN,MAAME,MAAgB,SAAW,SAA3C,GAEjC,OACC,yBAAKK,UAAU,SAASJ,QAASG,KAAKP,YAAaS,MAAOF,KAAKN,MAAMQ,OACpE,yBAAKD,UAAS,sBAAiBF,U,GAZdI,cCsDNC,G,iNAnDdC,aAAe,SAACC,GACf,IAAIC,EAEA,EAAKb,MAAMC,YAAc,EAAKD,MAAMc,QAAU,EAAKd,MAAMe,YAAYC,SAASJ,KACjFC,EAAc,CAAEI,gBAAiB,YAGlC,IAAMf,EAAQ,EAAKF,MAAMkB,MAAMN,GAE/B,OACC,kBAAC,EAAD,CACCR,GAAIQ,EACJT,QAAS,EAAKH,MAAMmB,cACpBlB,WAAY,EAAKD,MAAMC,WACvBO,MAAOK,EACPX,MAAOA,K,wEAMT,OACC,yBAAKK,UAAU,SACd,yBAAKA,UAAU,aACbD,KAAKK,aAAa,GAClBL,KAAKK,aAAa,GAClBL,KAAKK,aAAa,IAEpB,yBAAKJ,UAAU,aACbD,KAAKK,aAAa,GAClBL,KAAKK,aAAa,GAClBL,KAAKK,aAAa,IAEpB,yBAAKJ,UAAU,aACbD,KAAKK,aAAa,GAClBL,KAAKK,aAAa,GAClBL,KAAKK,aAAa,S,GArCJF,cCqCLW,EA3CD,CACb,CACC,EACA,EACA,GAED,CACC,EACA,EACA,GAED,CACC,EACA,EACA,GAED,CACC,EACA,EACA,GAED,CACC,EACA,EACA,GAED,CACC,EACA,EACA,GAED,CACC,EACA,EACA,GAED,CACC,EACA,EACA,ICjBaC,G,uLAhBb,IAAMC,EAAShB,KAAKN,MAAMsB,OAE1B,OACC,yBAAKf,UAAU,QACd,yBAAKA,UAAS,oBAA0B,MAAXe,EAAiB,YAAc,KAA5D,KACA,yBAAKf,UAAS,oBAA0B,MAAXe,EAAiB,YAAc,KAA5D,KACA,yBAAKf,UAAS,sBAA4B,MAAXe,EAAiB,WAAa,mB,GAR9Cb,cCuBJc,G,uLArBb,IAAMT,EAASR,KAAKN,MAAMc,OAE1B,IAAKA,EAAQ,OAAO,uBAAGP,UAAU,UAAb,gBAEpB,IAAMiB,EAAc,CAAEC,MAAkB,MAAXX,EAAiB,UAAY,WAE1D,OACC,uBAAGP,UAAU,UACZ,0BAAMA,UAAU,SAASC,MAAOgB,GAC9BV,GACM,IAHT,Y,GATkBL,c,ujBC0FNiB,E,YAtFd,WAAY1B,GAAQ,IAAD,8BAClB,4CAAMA,KAWP2B,kBAAoB,kBAAqC,IAA9BC,KAAKC,MAAMD,KAAKE,UAAkB,IAAM,KAZhD,EAcnBC,WAAa,iBAA6B,MAAtB,EAAKC,MAAMV,OAAiB,IAAM,KAdnC,EAgBnBW,SAAW,SAACC,GACX,IAAMC,EAAgB,EAAKH,MAAMV,OAE3Bc,EAAW,CAChBlB,MAAK,KAAQ,EAAKc,MAAMd,MAAnB,eAA2BgB,EAAaC,KAI9Cf,EAAMiB,QAAQ,SAACC,GACVA,EAAKC,MAAM,SAACC,GAAD,OAASJ,EAASlB,MAAMsB,KAASL,MAC/CC,EAASnC,YAAa,EACtBmC,EAAStB,OAASqB,EAClBC,EAASrB,YAAcuB,KAK6B,IAAvCG,OAAOC,KAAKN,EAASlB,OAAOyB,SAE1CP,EAASnC,YAAa,GAGvB,EAAK2C,SAAS,CACb1B,MAAckB,EAASlB,MACvBjB,WAAcmC,EAASnC,WACvBa,OAAcsB,EAAStB,OACvBC,YAAcqB,EAASrB,YACvBO,OAAc,EAAKS,gBA3CF,EA+CnBc,kBAAoB,WACnB,EAAKD,SAAS,CACbtB,OAAS,EAAKK,uBAjDG,EAqDnBmB,UAAY,WACX,EAAKF,SAAS,CACb1B,MAAc,GACdI,OAAc,EAAKK,oBACnB1B,YAAc,EACda,OAAc,KACdC,YAAc,QAzDf,EAAKiB,MAAQ,CACZd,MAAc,GACdI,OAAc,KACdrB,YAAc,EACda,OAAc,KACdC,YAAc,MAPG,E,sEAgElB,OACC,yBAAKR,UAAU,QACd,2CAECD,KAAK0B,MAAM/B,WAAa,kBAAC,EAAD,CAAQa,OAAQR,KAAK0B,MAAMlB,SAAa,kBAAC,EAAD,CAAMQ,OAAQhB,KAAK0B,MAAMV,SAE1F,kBAAC,EAAD,CACCH,cAAeb,KAAK2B,SACpBhC,WAAYK,KAAK0B,MAAM/B,WACvBa,OAAQR,KAAK0B,MAAMlB,OACnBC,YAAaT,KAAK0B,MAAMjB,YACxBG,MAAOZ,KAAK0B,MAAMd,QAGnB,4BAAQX,UAAS,qBAAiBD,KAAK0B,MAAM/B,WAAgC,GAAnB,kBAAyBE,QAASG,KAAKwC,WAAjG,mB,GA/EeC,IAAMtC,WCKLuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2e87e7d1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Square.scss';\r\n\r\nclass Square extends Component {\r\n\thandleClick = () => {\r\n\t\tif (this.props.isFinished || this.props.value) return;\r\n\r\n\t\tthis.props.onClick(this.props.id);\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst icon = !this.props.value ? '' : this.props.value === 'x' ? 'icon-x' : 'icon-o';\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"square\" onClick={this.handleClick} style={this.props.style}>\r\n\t\t\t\t<div className={`square-icon ${icon}`} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nSquare.propTypes = {\r\n\tid         : PropTypes.number,\r\n\tonClick    : PropTypes.func,\r\n\tisFinished : PropTypes.bool,\r\n\tstyle      : PropTypes.object,\r\n\tvalue      : PropTypes.string\r\n};\r\n\r\nexport default Square;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Game.scss';\r\nimport Square from './Square';\r\nimport './Board.scss';\r\n\r\nclass Board extends Component {\r\n\trenderSquare = (i) => {\r\n\t\tlet boxWinStyle;\r\n\r\n\t\tif (this.props.isFinished && this.props.winner && this.props.winningLine.includes(i)) {\r\n\t\t\tboxWinStyle = { backgroundColor: '#e7fdff' };\r\n\t\t}\r\n\r\n\t\tconst value = this.props.moves[i];\r\n\r\n\t\treturn (\r\n\t\t\t<Square\r\n\t\t\t\tid={i}\r\n\t\t\t\tonClick={this.props.onSquareClick}\r\n\t\t\t\tisFinished={this.props.isFinished}\r\n\t\t\t\tstyle={boxWinStyle}\r\n\t\t\t\tvalue={value}\r\n\t\t\t/>\r\n\t\t);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"board\">\r\n\t\t\t\t<div className=\"board-row\">\r\n\t\t\t\t\t{this.renderSquare(0)}\r\n\t\t\t\t\t{this.renderSquare(1)}\r\n\t\t\t\t\t{this.renderSquare(2)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"board-row\">\r\n\t\t\t\t\t{this.renderSquare(3)}\r\n\t\t\t\t\t{this.renderSquare(4)}\r\n\t\t\t\t\t{this.renderSquare(5)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"board-row\">\r\n\t\t\t\t\t{this.renderSquare(6)}\r\n\t\t\t\t\t{this.renderSquare(7)}\r\n\t\t\t\t\t{this.renderSquare(8)}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nBoard.propTypes = {\r\n\tonSquareClick : PropTypes.func,\r\n\tisFinished    : PropTypes.bool,\r\n\twinningLine   : PropTypes.array,\r\n\tmoves         : PropTypes.object,\r\n\twinner        : PropTypes.string\r\n};\r\n\r\nexport default Board;\r\n","const lines = [\r\n\t[\r\n\t\t0,\r\n\t\t1,\r\n\t\t2\r\n\t],\r\n\t[\r\n\t\t3,\r\n\t\t4,\r\n\t\t5\r\n\t],\r\n\t[\r\n\t\t6,\r\n\t\t7,\r\n\t\t8\r\n\t],\r\n\t[\r\n\t\t0,\r\n\t\t3,\r\n\t\t6\r\n\t],\r\n\t[\r\n\t\t1,\r\n\t\t4,\r\n\t\t7\r\n\t],\r\n\t[\r\n\t\t2,\r\n\t\t5,\r\n\t\t8\r\n\t],\r\n\t[\r\n\t\t0,\r\n\t\t4,\r\n\t\t8\r\n\t],\r\n\t[\r\n\t\t2,\r\n\t\t4,\r\n\t\t6\r\n\t]\r\n];\r\n\r\nexport default lines;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Turn.scss';\r\n\r\nclass Turn extends Component {\r\n\trender() {\r\n\t\tconst player = this.props.player;\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"turn\">\r\n\t\t\t\t<div className={`turn-icon ${player === 'x' ? 'is-active' : ''}`}>X</div>\r\n\t\t\t\t<div className={`turn-icon ${player === 'o' ? 'is-active' : ''}`}>O</div>\r\n\t\t\t\t<div className={`turn-toggle ${player === 'x' ? 'toggle-x' : 'toggle-o'}`} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nTurn.propTypes = {\r\n\tplayer : PropTypes.string\r\n};\r\n\r\nexport default Turn;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Result.scss';\r\n\r\nclass Result extends Component {\r\n\trender() {\r\n\t\tconst winner = this.props.winner;\r\n\r\n\t\tif (!winner) return <p className=\"result\">It's a draw!</p>;\r\n\r\n\t\tconst winnerColor = { color: winner === 'x' ? '#3e89cf' : '#39bdd7' };\r\n\r\n\t\treturn (\r\n\t\t\t<p className=\"result\">\r\n\t\t\t\t<span className=\"winner\" style={winnerColor}>\r\n\t\t\t\t\t{winner}\r\n\t\t\t\t</span>{' '}\r\n\t\t\t\twin!\r\n\t\t\t</p>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nResult.propTypes = {\r\n\twinner : PropTypes.string\r\n};\r\n\r\nexport default Result;\r\n","import React from 'react';\nimport './Game.scss';\nimport Board from './Board';\nimport lines from './lines';\nimport Turn from './Turn';\nimport Result from './Result';\n\nclass Game extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmoves       : {},\n\t\t\tplayer      : null,\n\t\t\tisFinished  : false,\n\t\t\twinner      : null,\n\t\t\twinningLine : null\n\t\t};\n\t}\n\n\t//choose randomly first player\n\tchooseFirstPlayer = () => (Math.round(Math.random()) === 0 ? 'x' : 'o');\n\n\tnextPlayer = () => (this.state.player === 'x' ? 'o' : 'x');\n\n\tmakeMove = (checkedBox) => {\n\t\tconst currentPlayer = this.state.player;\n\n\t\tconst newState = {\n\t\t\tmoves : { ...this.state.moves, [checkedBox]: currentPlayer }\n\t\t};\n\n\t\t// Check if current player is the winner\n\t\tlines.forEach((line) => {\n\t\t\tif (line.every((box) => newState.moves[box] === currentPlayer)) {\n\t\t\t\tnewState.isFinished = true;\n\t\t\t\tnewState.winner = currentPlayer;\n\t\t\t\tnewState.winningLine = line;\n\t\t\t}\n\t\t});\n\n\t\t// If there is no winner and there already have been 9 moves - draw (game is finished with no winner)\n\t\tconst isDraw = Object.keys(newState.moves).length === 9;\n\t\tif (isDraw) {\n\t\t\tnewState.isFinished = true;\n\t\t}\n\n\t\tthis.setState({\n\t\t\tmoves       : newState.moves,\n\t\t\tisFinished  : newState.isFinished,\n\t\t\twinner      : newState.winner,\n\t\t\twinningLine : newState.winningLine,\n\t\t\tplayer      : this.nextPlayer()\n\t\t});\n\t};\n\n\tcomponentDidMount = () => {\n\t\tthis.setState({\n\t\t\tplayer : this.chooseFirstPlayer()\n\t\t});\n\t};\n\n\tresetGame = () => {\n\t\tthis.setState({\n\t\t\tmoves       : {},\n\t\t\tplayer      : this.chooseFirstPlayer(),\n\t\t\tisFinished  : false,\n\t\t\twinner      : null,\n\t\t\twinningLine : null\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"game\">\n\t\t\t\t<h1>Tic Tac Toe</h1>\n\n\t\t\t\t{this.state.isFinished ? <Result winner={this.state.winner} /> : <Turn player={this.state.player} />}\n\n\t\t\t\t<Board\n\t\t\t\t\tonSquareClick={this.makeMove}\n\t\t\t\t\tisFinished={this.state.isFinished}\n\t\t\t\t\twinner={this.state.winner}\n\t\t\t\t\twinningLine={this.state.winningLine}\n\t\t\t\t\tmoves={this.state.moves}\n\t\t\t\t/>\n\n\t\t\t\t<button className={`game-reset ${!this.state.isFinished ? 'reset-disabled' : ''}`} onClick={this.resetGame}>\n\t\t\t\t\tPlay again\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}